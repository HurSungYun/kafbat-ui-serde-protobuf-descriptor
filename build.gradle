plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.google.protobuf' version '0.9.4'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'io.github.hursungyun.kafbat.ui.serde'
version = '0.1.4'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven {
        url 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    implementation 'io.kafbat.ui:serde-api:1.0.0'
    implementation 'com.google.protobuf:protobuf-java:3.24.4'
    implementation 'com.google.protobuf:protobuf-java-util:3.24.4'
    implementation 'io.confluent:kafka-schema-registry-client:7.4.0'
    implementation 'io.confluent:kafka-protobuf-serializer:7.4.0'
    
    // MinIO S3 client for S3 support
    implementation 'io.minio:minio:8.5.7'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:minio:1.19.3'
}

test {
    useJUnitPlatform {
        excludeTags 'integration'
    }
    finalizedBy jacocoTestReport
}

// Add separate task for integration tests
task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    description = 'Runs integration tests that require Docker/TestContainers'
    group = 'verification'
    
    // Only run if Docker is available or explicitly enabled
    onlyIf {
        System.getenv('ENABLE_INTEGRATION_TESTS') == 'true' || 
        project.hasProperty('enableIntegrationTests')
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

shadowJar {
    archiveClassifier.set('')
    mergeServiceFiles()
    
    // Exclude serde-api since it will be provided by kafbat UI
    dependencies {
        exclude(dependency('io.kafbat.ui:serde-api'))
    }
}

jar {
    enabled = false
}

build.dependsOn shadowJar

// Configure protobuf compilation
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.24.4'
    }
    // Generate descriptor set for test protos using the plugin-managed protoc
    generateProtoTasks {
        all().each { task ->
            if (task.sourceSet.name == 'test') {
                task.generateDescriptorSet = true
                task.descriptorSetOptions.includeImports = true
                // Place the descriptor on the test runtime classpath
                task.descriptorSetOptions.path = "$buildDir/resources/test/test_descriptors.desc"
            }
        }
    }
}

// Ensure descriptor generation runs before tests
test.dependsOn tasks.named('generateTestProto')

// Spotless configuration for code formatting
spotless {
    java {
        // Use Google Java format
        googleJavaFormat('1.19.2').aosp().reflowLongStrings()
        
        // Remove unused imports
        removeUnusedImports()
        
        // Trim trailing whitespace
        trimTrailingWhitespace()
        
        // Ensure file ends with newline
        endWithNewline()
        
        // Apply to all Java files
        target 'src/**/*.java'
        
        // Exclude generated files
        targetExclude 'src/*/generated/**', 'build/generated/**'
    }
}