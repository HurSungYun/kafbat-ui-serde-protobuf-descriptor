---

services:
  kafka-ui:
    container_name: kafka-ui-protobuf-test
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      # Kafka cluster configuration
      KAFKA_CLUSTERS_0_NAME: ProtobufTestCluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

      # Protobuf Descriptor Set Serde configuration
      KAFKA_CLUSTERS_0_SERDE_0_NAME: ProtobufDescriptorSetSerde
      KAFKA_CLUSTERS_0_SERDE_0_FILEPATH: /serde/kafbat-ui-serde-protobuf-descriptor-0.1.0.jar
      KAFKA_CLUSTERS_0_SERDE_0_CLASSNAME: io.github.hursungyun.kafbat.ui.serde.ProtobufDescriptorSetSerde
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_FILE: /descriptors/test_descriptors.desc
      # Simple topic-to-message-type mappings (key: value format)
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_TOPIC_MAPPING_VALUE_LOCAL_USER-EVENTS: "test.User"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_TOPIC_MAPPING_VALUE_LOCAL_ORDER-EVENTS: "test.Order"
      # Default message type for other topics
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_MESSAGE_VALUE_DEFAULT_TYPE: "test.User"

      # Optional: Enable debug logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_PROVECTUS: DEBUG

    volumes:
      - ../build/libs:/serde
      - ./descriptors:/descriptors
      - ./data:/data
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper-protobuf-test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka-protobuf-test
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MinIO S3-compatible storage for descriptor files
  minio:
    image: minio/minio:latest
    container_name: minio-protobuf-test
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO setup service - creates bucket and uploads descriptor
  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./descriptors:/descriptors
      - ./topic-mappings:/topic-mappings
    entrypoint: /bin/sh
    command: 
      - -c
      - |
        mc alias set minio http://minio:9000 minioadmin minioadmin123
        mc mb minio/protobuf-descriptors || true
        mc cp /descriptors/test_descriptors.desc minio/protobuf-descriptors/
        mc cp /topic-mappings/topic-mappings.json minio/protobuf-descriptors/
        mc ls minio/protobuf-descriptors/
        echo 'MinIO setup complete:'
        echo '  - Descriptor uploaded to s3://protobuf-descriptors/test_descriptors.desc'
        echo '  - Topic mappings uploaded to s3://protobuf-descriptors/topic-mappings.json'
    profiles:
      - setup

  # Topic creation service
  topic-creator:
    image: confluentinc/cp-kafka:7.4.0
    container_name: topic-creator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:29092
    volumes:
      - ./scripts:/scripts
    command: ["bash", "/scripts/create_topics.sh"]
    profiles:
      - setup

  # Kafka UI with S3 descriptor source
  kafka-ui-s3:
    container_name: kafka-ui-protobuf-s3-test
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - "8081:8080"
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Kafka cluster configuration
      KAFKA_CLUSTERS_0_NAME: ProtobufS3TestCluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

      # Protobuf Descriptor Set Serde with S3 configuration
      KAFKA_CLUSTERS_0_SERDE_0_NAME: ProtobufDescriptorSetSerdeS3
      KAFKA_CLUSTERS_0_SERDE_0_FILEPATH: /serde/kafbat-ui-serde-protobuf-descriptor-0.1.0.jar
      KAFKA_CLUSTERS_0_SERDE_0_CLASSNAME: io.github.hursungyun.kafbat.ui.serde.ProtobufDescriptorSetSerde
      
      # S3 Configuration using MinIO
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_ENDPOINT: "http://minio:9000"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_BUCKET: "protobuf-descriptors"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_OBJECT_KEY: "test_descriptors.desc"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_ACCESS_KEY: "minioadmin"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_SECRET_KEY: "minioadmin123"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_SECURE: "false"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_REFRESH_INTERVAL_SECONDS: "30"
      
      # Message type configuration (same as local file)
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_TOPIC_MAPPING_VALUE_LOCAL_USER-EVENTS: "test.User"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_TOPIC_MAPPING_VALUE_LOCAL_ORDER-EVENTS: "test.Order"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_MESSAGE_VALUE_DEFAULT_TYPE: "test.User"

      # Optional: Enable debug logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_IO_GITHUB_HURSUNGYUN: DEBUG

    volumes:
      - ../build/libs:/serde
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - s3-test

  # Kafka UI with S3 descriptor source AND S3 topic mappings
  kafka-ui-s3-topic-mapping:
    container_name: kafka-ui-protobuf-s3-topic-mapping-test
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Kafka cluster configuration
      KAFKA_CLUSTERS_0_NAME: ProtobufS3TopicMappingTestCluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

      # Protobuf Descriptor Set Serde with S3 configuration
      KAFKA_CLUSTERS_0_SERDE_0_NAME: ProtobufDescriptorSetSerdeS3TopicMapping
      KAFKA_CLUSTERS_0_SERDE_0_FILEPATH: /serde/kafbat-ui-serde-protobuf-descriptor-0.1.0.jar
      KAFKA_CLUSTERS_0_SERDE_0_CLASSNAME: io.github.hursungyun.kafbat.ui.serde.ProtobufDescriptorSetSerde
      
      # S3 Configuration for descriptors
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_ENDPOINT: "http://minio:9000"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_BUCKET: "protobuf-descriptors"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_OBJECT_KEY: "test_descriptors.desc"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_ACCESS_KEY: "minioadmin"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_SECRET_KEY: "minioadmin123"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_SECURE: "false"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_DESCRIPTOR_VALUE_S3_REFRESH_INTERVAL_SECONDS: "30"
      
      # S3 Topic Mapping Configuration
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_TOPIC_MAPPING_VALUE_S3_BUCKET: "protobuf-descriptors"
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_TOPIC_MAPPING_VALUE_S3_OBJECT_KEY: "topic-mappings.json"
      
      # Local Topic Mapping Override (only for payment-events, others come from S3)
      KAFKA_CLUSTERS_0_SERDE_0_PROPERTIES_TOPIC_MAPPING_VALUE_LOCAL_PAYMENT-EVENTS: "test.Order"

      # Optional: Enable debug logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_IO_GITHUB_HURSUNGYUN: DEBUG

    volumes:
      - ../build/libs:/serde
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - s3-topic-mapping-test

volumes:
  minio_data:

